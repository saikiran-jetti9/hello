name: Service Registry Checks

on:
  pull_request:
    branches:
      - main
    paths:
      - 'beeja-services/beeja-service-registry/**'
jobs:

  #CODE LINTING
  lint:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Run Spotless Apply
      working-directory: beeja-services/beeja-service-registry
      run: gradle spotlessApply

    - name: Run Checkstyle
      working-directory: beeja-services/beeja-service-registry
      run: gradle checkstyleMain

  # JUNIT Testing
  junit-tests:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Run Tests
      working-directory: beeja-services/beeja-service-registry
      run: gradle test

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: junit-results
        path: build/test-results/test/

  # Image Build and Scanning
  trivy-image-scan:
    permissions:
      contents: read 
      security-events: write

    runs-on: ubuntu-24.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # - name: gradle wrapper
      #   working-directory: beeja-services/beeja-service-registry
      #   run: gradle wrapper

      - name: Generate jar package
        working-directory: beeja-services/beeja-service-registry
        run: gradle :beeja-service-registry:bootJar

      - name: Build Docker Image
        working-directory: beeja-services/beeja-service-registry
        run: docker build -t my-app:1.0 .
        env:
          DOCKER_BUILDKIT: 1

      - name: Trivy Image Scanning for Vulnarability
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: my-app:1.0
          format: 'sarif'
          output: 'trivy-docker.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-docker.sarif'