openapi: "3.0.1"

info :
  title: "File Management API"
  version: "2.0"
  description: |
    `Product of tech.at.core`
    API documentation for the Beeja Open API application. It allows customer to access
    their data via a separate API secured by an API key, secret and permissions.

    ## Authentication & Authorization

    The Beeja Public API uses Google as its identity 
    and authentication system, using OAuth2 / OpenID Connect. Additionally an API key/secret 
    authentication method is offered.

    - **Token-based:** A client can also directly send a Google OAuth2 access 
      token to any endpoint ([Bearer Token Authentication][oauth2-bearer]). 
      Its a Client Credential flow and used for machine to machine communication.
    
    - **API key/secret:** The endpoints of the application are also accessible via an API key 
      and API secret as header information. Generating the Open API key and secret is only possible 
      on SBOX environment. Generating and getting API keys endpoints are not exposed to DEV, REVIEW 
      or PROD.
    
    ### Authorization Levels
    
    Most of the API's endpoints require certain functional specific scopes depending on which endpoint
    is triggered. Supported scopes 

externalDocs:
  description: Explore Beeja Application
  url: https://beeja-dev.techatcore.com/

servers:
   -url: "http://localhost:8080/file-management-service/",
    description: "Beeja Employee management"

tags:
  - name: Employee-Management
    description: manages the details of the employees.

security:
  - StagingAccessToken: [ ]

paths:
  /employees:
    get:
      operationId: findAll
      responses:
      '200':
        description: OK
        content:
          '*/*':
            schema:
              type: object
  /v1/users:
    get:
      summary: Get all employees
      operationId: getAllEmployees
      tags:
        - Employees
      responses:
        '200':
          description: A list of all employees
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The ID of the employee.
                    name:
                      type: string
                      description: The name of the employee.
                    department:
                      type: string
                      description: The department of the employee.
        '405':
          description: method not allowed
          content:
            application/json:
              example:
                failureReason:  You are unauthorized to access account data.
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create an employee
      operationId: createEmployee
      tags:
        - Employees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the user.
                employeeId:
                  type: string
                  description: The employee ID.
                organizations:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The ID of the organization.
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/users/{employeeID}:
    get:
      summary: Get employee details by ID
      operationId: getEmployeeByEmployeeId
      tags:
        - Employees
      parameters:
        - name: employeeID
          in: path
          required: true
          description: ID of the employee
          schema:
            type: string
      responses:
        '200':
          description: Employee details along with account details
          content:
            application/json:
              schema:
                type: object
                properties:
                  employee:
                    type: object
                  account:
                    type: object
        '404':
          description: Unknown or inaccessible asset list
          content:
            application/json:
              example:
                failureReason: EMPLOYEE_NOT_FOUND
              schema:
                $ref: "#/components/schemas/Error"
        '405':
          description: method not allowed
          content:
            application/json:
              example:
                failureReason: You are unauthorized to access account data.
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update an employee
      operationId: updateEmployee
      tags:
        - Employees
      parameters:
        - name: employeeId
          in: path
          required: true
          description: ID of the employee to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeUpdateRequest'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        400':
          description: Invalid parameter
          content:
            application/json:
              example:
                failureReason: BAD_REQUEST
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/users/organizations/{organizationId}:
    delete:
      summary: Delete all employees by organization ID
      operationId: deleteAllEmployeesByOrganizationId
      tags:
        - Employees
      parameters:
        - name: organizationId
          in: path
          required: true
          description: ID of the organization
          schema:
            type: string
      responses:
        '200':
          description: Employees deleted successfully
          content:
            text/plain:
              schema:
                type: string
                example:
                  Employees Deleted in Org: { organizationId }
        '500':
          $ref: '#/components/responses/InternalServerError'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  securitySchemes:
    StagingAccessToken:
      type: oauth2
      description: |
        `Use This Auth Service for Local Environment`
        After successfully logged in, come back to this window and close this popup. Cool, now you can access Endpoints
      flows:
        explicit:
          authorizationUrl: http://localhost:8000/oauth2/authorization/google
    googleOAuth2AuthorizationCode:
      type: oauth2
      description: |
        `Use This Auth Service for Dev Environment`
        After successfully logged in, come back to this window and close this popup. Cool, now you can access Endpoints
      flows:
        explicit:
          authorizationUrl: https://beeja-dev.techatcore.com/oauth2/authorization/google
  schemas:
    loan:
      title: information to store loan results
      type: object
      required:
      properties:
        id:
          type: string
          example: "1"
          description: the generated id
        beejaAccountId:
          type: string
          example: "654cf5c082d05e5d71de675c"
          description: the ID of the employee provided by  the organization
        employeeId:
          type: string
          example: "tac001"
          description: the ID of the employee provided by  the organization
        organizationId:
          type: string
          example: "654b0d9d355b9f0029b7733c"
          description: ID to recognise the organization
        Address:
          type: Address
          example:
           -landMark: "PRIMARY"
           -city: "SDP"
           -state: "TS"
           -country: "IN"
           -pinCode: "980"
        PersonalInformation:
          type: PersonalInformation
          example:
            -nationality: "Indian"
            -dateOfBirth: 2024-01-30T00:00:00.000+00:00
            -gender: "Male"
            -maritalStatus: "Single"
        jobDetails:
          type: JobDetails
          example:
            -designation: "Software Developer"
            -employementType: "Full time"
            -department: "IT"

      requests:
        EmployeeUpdateRequest:
          type: object
          properties:
            id:
              type: string
            beejaAccountId:
              type: number
            firstName:
              type: string
            lastName:
              type: string
            email:
              type:string
            employeeId:
              type: string
            address:
              type: Addresshouse{ Number,landMark,village,city,state,country,pinCode }
            personalInformantion:
              type: PersonalInformation
            jobDetails:
              type: JobDetails{ designation,employementType,department,joiningDate,resignationDate }
            contact:
              type: Contact{ alternativeEmail,phone,alternativePhone }
            pfDetails:
              type: PFDetails{ PFNumber,UAN,joiningData,accountNumber,state,location }
            department:
              type:string
            position:
              type: string

    Error:
      type: object
      description: An error response.
      required:
        - code
      properties:
        type:
          type: string
          example: authentication_error
          description: An error type identifying the category of error.
        code:
          type: string
          example: USER_NOT_FOUND
          description: An error code to indicate short version of error.
        message:
          type: string
          example: The beeja user has not been configured to use APIs yet
          description: An error description.
        details:
          type: object
          example:
            field: firstName
            message: must not be empty
          description: Further details about the error. The set of
            properties in this object depends on the type of error.
          additionalProperties: true

  responses:
    Unauthorized:
      description: Missing authentication.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            failureReason: UNAUTHORIZED
            details: "Please sign-in into Beeja"

      Forbidden:
        description: Valid credentials but not enough privileges
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              failureReason: USER_NOT_WHITELISTED
              details: "Access Denied- You have no required permissions to do this operation"

      BadRequest:
        description: Something wrong with request parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
            example:
              failureReason: BAD_REQUEST
              details: "Internal Server Error"